// --- Configuration ---
const BRAND_NAME = "Sito Cloud Proxy";

// --- Injected Client-Side Script ---
const INJECTED_SCRIPT = (proxiedOrigin) => `
<script>
(function() {
  const PROXIED_ORIGIN = '${proxiedOrigin}';
  const PROXY_BASE_URL = location.origin + '/proxy?url=';

  const rewriteUrl = (url) => {
    if (!url) return url;
    try {
      const absoluteUrl = new URL(url, PROXIED_ORIGIN).href;
      if (absoluteUrl.startsWith(PROXIED_ORIGIN)) {
        return PROXY_BASE_URL + encodeURIComponent(absoluteUrl);
      }
    } catch (e) {}
    return url;
  };

  // Intercept fetch
  const originalFetch = window.fetch;
  window.fetch = function(input, init) {
    if (input instanceof Request) {
      input = new Request(rewriteUrl(input.url), input);
    } else if (typeof input === 'string') {
      input = rewriteUrl(input);
    }
    return originalFetch.call(this, input, init);
  };

  // Intercept XMLHttpRequest
  const originalXhrOpen = XMLHttpRequest.prototype.open;
  XMLHttpRequest.prototype.open = function(method, url, ...args) {
    const rewrittenUrl = rewriteUrl(url);
    return originalXhrOpen.call(this, method, rewrittenUrl, ...args);
  };

  // Intercept SPA navigation
  const rawPushState = history.pushState;
  const rawReplaceState = history.replaceState;

  const reroute = () => {
    const current = new URL(location.href);
    if (current.origin === location.origin && current.pathname.startsWith("/proxy")) {
      location.href = location.href; // force reload through proxy
    }
  };

  history.pushState = function(...args) {
    rawPushState.apply(this, args);
    setTimeout(reroute, 0);
  };

  history.replaceState = function(...args) {
    rawReplaceState.apply(this, args);
    setTimeout(reroute, 0);
  };

  window.addEventListener('popstate', reroute);
})();
</script>
`;

// --- HTML Rewriters ---
class AttributeRewriter {
  constructor(proxiedOrigin) {
    this.proxiedOrigin = proxiedOrigin;
  }
  element(element) {
    const attrs = ['href', 'src', 'action', 'data-src'];
    for (const attr of attrs) {
      const original = element.getAttribute(attr);
      if (original) {
        const abs = new URL(original, this.proxiedOrigin).href;
        const proxyUrl = `/proxy?url=${encodeURIComponent(abs)}`;
        element.setAttribute(attr, proxyUrl);
      }
    }
  }
}

class HeadRewriter {
  constructor(proxiedOrigin) {
    this.proxiedOrigin = proxiedOrigin;
  }
  element(element) {
    element.prepend(INJECTED_SCRIPT(this.proxiedOrigin), { html: true });
  }
}

// --- Cloudflare Worker ---
addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const url = new URL(request.url);
  if (url.pathname.startsWith('/proxy')) {
    return handleProxyRequest(request);
  }
  return showUrlForm();
}

async function handleProxyRequest(request) {
  const url = new URL(request.url);
  const targetUrl = url.searchParams.get('url');
  if (!targetUrl) {
    return new Response('Error: "url" query parameter is missing.', { status: 400 });
  }

  try {
    if (!/^https?:\/\//i.test(targetUrl)) {
      throw new Error('Invalid URL. Must start with http:// or https://');
    }

    const fullTarget = new URL(targetUrl);
    const proxiedOrigin = fullTarget.origin;

    const reqHeaders = new Headers(request.headers);
    reqHeaders.set('Host', fullTarget.host);
    reqHeaders.set('Referer', proxiedOrigin);

    const originResponse = await fetch(fullTarget.toString(), {
      method: request.method,
      headers: reqHeaders,
      body: request.body,
      redirect: 'manual'
    });

    // Handle redirects
    if (originResponse.status >= 300 && originResponse.status < 400) {
      const location = originResponse.headers.get('Location');
      if (location) {
        const redirectUrl = new URL(location, proxiedOrigin).href;
        const newLocation = `${url.origin}/proxy?url=${encodeURIComponent(redirectUrl)}`;
        return new Response(null, {
          status: 302,
          headers: { 'Location': newLocation }
        });
      }
    }

    // Modify headers
    const responseHeaders = new Headers(originResponse.headers);
    responseHeaders.delete('Content-Security-Policy');
    responseHeaders.delete('Content-Encoding');
    responseHeaders.delete('Strict-Transport-Security');
    responseHeaders.set('Access-Control-Allow-Origin', '*');

    const contentType = responseHeaders.get('content-type') || '';

    if (contentType.includes('html')) {
      const rewriter = new HTMLRewriter()
        .on('head', new HeadRewriter(proxiedOrigin))
        .on('a, link, script, img, form, iframe', new AttributeRewriter(proxiedOrigin))
        .on('base', { element: (el) => el.remove() });

      const transformed = rewriter.transform(originResponse);
      return new Response(transformed.body, {
        status: originResponse.status,
        statusText: originResponse.statusText,
        headers: responseHeaders
      });
    }

    return new Response(originResponse.body, {
      status: originResponse.status,
      statusText: originResponse.statusText,
      headers: responseHeaders
    });

  } catch (err) {
    return showErrorPage(err);
  }
}

// --- UI Pages ---
const DEFAULT_CSS = `
body { font-family: sans-serif; background: #f5f5f5; margin: 0; }
.container { max-width: 600px; margin: 5em auto; background: #fff; padding: 2em; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
input[type="url"] { width: 100%; padding: 10px; margin-bottom: 1em; border: 1px solid #ccc; border-radius: 4px; }
button { padding: 10px 20px; background: #4caf50; color: white; border: none; border-radius: 4px; cursor: pointer; }
button:hover { background: #45a049; }
.error-container { text-align: center; }
.error-message { color: red; }
`;

function showUrlForm() {
  const html = `
  <!DOCTYPE html>
  <html><head>
    <title>Welcome to ${BRAND_NAME}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>${DEFAULT_CSS}</style>
  </head>
  <body>
    <div class="container">
      <h1>${BRAND_NAME}</h1>
      <p>Enter a URL below to proxy it securely and privately.</p>
      <form onsubmit="proxyUrl(event)">
        <input type="url" id="urlInput" placeholder="https://example.com" required>
        <button type="submit">Go</button>
      </form>
    </div>
    <script>
      function proxyUrl(event) {
        event.preventDefault();
        const url = document.getElementById('urlInput').value;
        if (url) {
          window.location.href = '/proxy?url=' + encodeURIComponent(url);
        }
      }
    </script>
  </body></html>`;
  return new Response(html, {
    headers: { 'Content-Type': 'text/html;charset=UTF-8' }
  });
}

function showErrorPage(error) {
  const html = `
  <!DOCTYPE html>
  <html><head>
    <title>Error - ${BRAND_NAME}</title>
    <style>${DEFAULT_CSS}</style>
  </head>
  <body>
    <div class="container error-container">
      <h1>⚠️ Proxy Error</h1>
      <p class="error-message">${error.message}</p>
      <button onclick="window.location.href='/'">← Return Home</button>
    </div>
  </body></html>`;
  return new Response(html, {
    status: 500,
    headers: { 'Content-Type': 'text/html;charset=UTF-8' }
  });
}
